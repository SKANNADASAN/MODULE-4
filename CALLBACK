MODULE-4 -CALL BACKS.

Synchronous - step by step execution.
Asynchronous- simultaneous execution.

Javascript default feature is synchronous.

To bring asynchronous in js we use callback events (call back,promise,async and await).

SetTimeout();

It is used to make js synchronous.
After a specific amount of time it will execute.

SYNTAX;

setTimeout(function as para,time interval)

Note; time interval should be in milliseconds.

EXAMPLE;

set timeout(()=>{console.log("hello")},5000);

TERMS;
1)CALL STACK;
This is the place where the functions executed.
It is used to keep the track of js functions to be executed.

Stack-data structure(one above another)
LIFO -Last In First Out.

Browser history uses stack data structure

EVENTS QUEUE (or)CALL-BACK QUEUE;

It is a place where the async code waits for execution.

FIFO- first in firstout.

latentflip.com/loupe - tool which explains the web apis,call stack and event queue.

Web APLs;

Place where setTimeout is tracking after the timeout it push the function to the callback (or) event-queue.

EVENT LOOP;

connection between call stack and call back queue.

CALL BACK;

when a function accepts another function as paramater that parameter function is called call back function.

ex;MRF

Naming a call back function;

Calling a function using function name.

EXAMPLE;

//Naming a callback function:
function foo(name){
console.log(`Hello ${name}, Welcome!`)
}
function intro(fname,lname,cb){
const fullname=`${fname} ${lname}`;
cb(fullname);
}
intro("john","doe",foo);



DAY-2 ;

MULTI LEVEL FUNCTION ;more than one function are calles multilevel function.

CALL BACK HELL SCENARIO;

It there are more nested function one inside another are called call back hell scenario.

For this scenario we can go for promise.


CALL BACK;

used for short asynchronous function.
We don't use call back for longer function because of call back scenario.

PROMISE;

WHY PROMISE;

To overcome call back hell scenario.
It returns object has a result.
Initial state of promise is always pending when you create a promise (freshly)
Promise is a object.
This object takes function as a paramater.
Inside function we have resolve and reject.
Promise returns result always object.

Promise is a updated version of xml http request.

If want to access the value in promise we need (.then) and (.catch).

.then - used to access value value of rejected state

.catch-used to access the value of the rejected state

.catch should be joined with .then otherwise it will show some uncaught error.

.then should be many but .catch should be one.

State : value

PENDING TO FULLFILLED;
when
THREE STATE;

1)Pending
2)Fullfilled
3)Rejected

PENDING TO FULLFILLED;

when the async operations has completed,it will go to fullfilled.

PENDING TO REJECTED;

when async operations fails it will go rejected.

SYNTAX OF PROMISE;

let p1 = new Promise((resolve,reject)=>{
if(age>=18){
resolve("success")
}
else{
reject("failure")
}
})

USING OF (. then) and(.catch)

let age = window.prompt()

let p1 = new Promise((resolve,reject)=>{
if(age>=18){
resolve("success")
}
else{
reject("failure")
}
})
console.log(p1)

p1.then((data)=>{
console.log(data)
}).catch((error)=>{
console.log(error)
});

PROMISE IN FUNCTION;

function foo(){
return new Promise((resolve,reject)=>{
resolve ("this is resolve state")
reject("this is rejected state")
})
}
foo().then((data)=>{
console.log(data)
}).catch((error)=>{
console.log(error)
});


SETTIMEOUT IN FUNCTION;

function foo(){
return new Promise((resolve,reject)=>{

setTimeout(()=>resolve("Hello guvi"),5000);
})
}
foo().then((data)=>{
console.log(data)
}).catch((error)=>{
console.log(error)
});

CHANING OF PROMISE(HELL BACK SCENARIO);

RESOLVE;

function mul(num){

return new Promise((resolve,reject)=>{
setTimeout(()=>resolve(2*num),2000);
})
}

mul(5).then((v1)=>{
console.log(v1)
return mul(v1)
}).then((v2)=>{
console.log(v2)
return(mul(v2))
}).then((v3)=>{
console.log(v3)
})

REJECT;

function mul(num){

return new Promise((resolve,reject)=>{
setTimeout(()=>reject("rejected"),2000);
})
}

mul(5).then((v1)=>{
console.log(v1)
return mul(v1)
}).then((v2)=>{
console.log(v2)
return(mul(v2))
}).then((v3)=>{
console.log(v3)
}).catch((error)=>{
console.log(error);
});

ADVANTAGES OF PROMISES;

1) we can use to handle multiple asynchronous operations by using chaining of promise.

DAY-3;

PROMISE ALL;

If you want to resolve all promise at a time can go for promise all.(after the all time out finished it will show output
as per the order given in the console)

It will return output as array of promises.

Promise all waits until all asynchronous operations runs.

If anyone promise fails will show result only the failed operation result.

DRAWBACKS;

If anyone fails whole will fail.

SCENARIO : 1;

All output will be shown at a time after all execution happens.

// SCENARIO ;1

var p1 = new Promise((resolve,reject)=>{
if(true){
setTimeout(()=>{resolve("promise1 is resolved")},2000)
}
else{
setTimeout(()=>{reject("promise1 is rejected")},2000)
}
})
var p2 = new Promise((resolve,reject)=>{
if(true){
setTimeout(()=>{resolve("promise2 is resolved")},2000)
}
else{
setTimeout(()=>{reject("promise2 is rejected")},2000)
}
})
var p3 = new Promise((resolve,reject)=>{
if(true){
setTimeout(()=>{resolve("promise3 is resolved")},2000)
}
else{
setTimeout(()=>{reject("promise3 is rejected")},2000)
}
})
Promise.all([p2,p3,p1]).then((data)=>console.log(data)).catch((error)=>console.log(error));

SCENARIO;2

If anyone fails rejected output will be shown.

// SCENARIO ;2

var p1 = new Promise((resolve,reject)=>{
if(true){
setTimeout(()=>{resolve("promise1 is resolved")},2000)
}
else{
setTimeout(()=>{reject("promise1 is rejected")},2000)
}
})
var p2 = new Promise((resolve,reject)=>{
if(false){
setTimeout(()=>{resolve("promise2 is resolved")},2000)
}
else{
setTimeout(()=>{reject("promise2 is rejected")},2000)
}
})
var p3 = new Promise((resolve,reject)=>{
if(true){
setTimeout(()=>{resolve("promise3 is resolved")},2000)
}
else{
setTimeout(()=>{reject("promise3 is rejected")},2000)
}
})
Promise.all([p2,p3,p1]).then((data)=>console.log(data)).catch((error)=>console.log(error));

USING PROMISE IN REST COUNTRIES;

let res = fetch("https://raw.githubusercontent.com/rvsp/restcountries-json-data/master/res-countries.json")

console.log(res)
res.then((data)=>{
return data.json();
}).then((data)=>console.log(data)).catch((error)=>console.log(error))

FOR ACCESSING TN;

let res2 =fetch("https://data.covid19india.org/v4/min/data.min.json")



res2.then((data)=>{
return data.json()
}).then((data)=>{
foo(data)
}).catch((error)=>console.log(error))

FOR TAMILNADU;
function foo(data){
console.log(data.TN)
}



FOR ACCESSING CHENNAI;

let res2 =fetch("https://data.covid19india.org/v4/min/data.min.json")



res2.then((data)=>{
return data.json()
}).then((data)=>{
foo(data)
}).catch((error)=>console.log(error))


FOR CHENNAI;

function foo(data){
console.log(data.TN.districts.Chennai.delta)
}

DAY;4

To avoid more .then usage we can go for async and await

ASYNC and AWAIT;

It helps to write promises easier are called syntatic sugar

Always return output as promise.

Await is used inside async only.

Fetch also returns promise.

We use two await in async

First async used to convert fetch promise into readable stream

Then we use .json to convert it after that it will also be a Promise

So second await is used to convert that promise into an output.

CONVERT NORMAL TO ASYNC FUNCTION;

if we put async keyword before function keyword it will become async function.

SYNTAX;

async function funname(){

Let result = await promise

}

To handle error in async and await we used try and catch in async/await.

If promise is rejected we can use try-catch to handle that error

Try- codes to be written

Catch - to catch errors and show if error occurs.

ASYNC AWAIT EXAMPLE;

function getdata(){
return new Promise((resolve,reject)=>{
setTimeout(()=>resolve("this is resolved"),3000)
})
}
async function foo(){
const res = await getdata()
console.log(res)
}
console.log(foo())


HANDLING TWO FUNCTIONS IN ASYNC/AWAIT;

function getdata(){
return new Promise((resolve,reject)=>{
setTimeout(()=>resolve("this is resolved"),3000)
})
}
function putdata(){
return new Promise((resolve,reject)=>{
setTimeout(()=>resolve("this is rejected"),5000)
})
}
async function foo(){
const s1 = await getdata()
const s2 = await putdata()
console.log(s1)
console.log(s2)
}
foo()


IF ONE FUNCTION REJECTED;

function getdata(){
return new Promise((resolve,reject)=>{
setTimeout(()=>resolve("this is resolved"),3000)
})
}
function putdata(){
return new Promise((resolve,reject)=>{
setTimeout(()=>reject("this is rejected"),5000)
})
}
async function foo(){
const s1 = await getdata()
const s2 = await putdata()
console.log(s1)
console.log(s2)
}
foo()


HANDLING TWO API IN ASYNC/AWAIT;


function getdata(){
return fetch("https://raw.githubusercontent.com/rvsp/restcountries-json-data/master/res-countries.json")
}

function putdata(){
return fetch("https://data.covid19india.org/v4/min/data.min.json")
}
async function foo(){
const s1 = await getdata()
let result1 = await s1.json()
console.log(result1)
const s2 = await putdata()
let result2 = await s2.json()
console.log(result2)

}
foo()


API INSIDE THE ASYNC/AWAIT;

async function foo(){
const s1 = await fetch("https://data.covid19india.org/v4/min/data.min.json")
let result1 = await s1.json()
console.log(result1)
}
foo()


TRY AND CATCH EXAMPLE;

function getdata(){
return new Promise((resolve,reject)=>{
setTimeout(()=>reject("this is rejected"),3000)
})
}
async function foo(){

try {
const data =await getdata()
} catch (error) {
console.log(error)
}
}
foo()


TRY AND CATCH IN ASYNC/AWAY;

async function foo(){
try {
const s1 = await fetch("https://data.covid19india.org/v4/min/data.min.json")
let result1 = await s1.json()
console.log(result1)
} catch (error) {
console.log(error)
}
}
foo()


CLASS TASK;

<body>
    <input id="input" name="input" type="text">
    <input type="submit" value="submit" onclick="foo()">
    <script src="script.js"></script>
</body>


async function foo(){
try {
let user =document.getElementById("input").value
console.log(user)
let s1 = await fetch(`https://api.covid19api.com/total/country/${user}`)
let result =await s1.json()
for(var i in result){
console.log(`Active : ${result[i].Active} Confirmed : ${result[i].Confirmed} Deaths : ${result[i].Deaths} Recovered :
${result[i].Recovered}`)
}
} catch (error) {
console.log(error)

}
// }


LAST DAY IN CALL BACK;

HANDLING TWO APIs IN ASYNC AWAIT;


//multiple api with async and await
async function getdata(){
let res=await fetch('https://raw.githubusercontent.com/rvsp/restcountries-json-data/master/res-countries.json')
let result= await res.json();
console.log(result);
try {
for(var i in result){
var name=result[i].name;
var latlon=result[i].latlng;
wd(name,...latlon);
}
}
catch (error) {
console.log("invalid country"+name+error.message);
}
}
async function wd(name,lat,lon){

try {
if(lat===undefined) throw new Error("Invalid coordiantes");
let res1=await
fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=b6ccb5ec692c5ad80b29c5c862060b8d`)
let result1=await res1.json();
console.log(`${name}:${result1.main.temp}`);
} catch (error) {
console.log("lost data"+error.message);
}
}
getdata();
